{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx","webpack:///./src/components/SEO/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js"],"names":["Index","render","postEdges","this","props","data","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_3__","location","title","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","config","siteTitle","rel","href","siteUrl","_components_SEO__WEBPACK_IMPORTED_MODULE_5__","_components_PostListing__WEBPACK_IMPORTED_MODULE_4__","React","Component","pageQuery","exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","__webpack_require__","_MediaOverlay3","obj","default","PostPreview","_this","_Component","call","state","mobile","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","react_default","Card_default","key","path","raise","gatsby_browser_entry","style","textDecoration","to","Media_default","height","paddingBottom","PostCover","postNode","CardTitle_default","Buttons_default","raised","secondary","expander","avatar","Avatars_default","icon","FontIcons_default","iconClassName","moment","date","format","dateFormat","subtitle","timeToRead","CardText_default","expandable","excerpt","PostTags","tags","PostListing","getPostList","postList","forEach","postEdge","push","node","fields","slug","frontmatter","cover","map","post","components_PostPreview","SEO","description","image","postURL","_this$props","postPath","postSEO","postMeta","urljoin","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","url","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","strArray","resultArray","match","length","first","shift","replace","i","component","TypeError","str","join","parts","split","normalize","arguments","slice","module"],"mappings":"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","file":"component---src-pages-index-jsx-a2f4a4e8904b2416de6c.js","sourcesContent":["/** src/pages/index.jsx */\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport PostListing from '../components/PostListing';\nimport SEO from '../components/SEO';\nimport config from '../../data/SiteConfig';\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <Layout location={this.props.location} title='Home'>\n        <div className='index-container'>\n          <Helmet>\n            <title>{config.siteTitle}</title>\n            <link rel='canonical' href={`${config.siteUrl}`} />\n          </Helmet>\n          <SEO postEdges={postEdges} />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React, { Component } from 'react';\nimport Card from 'react-md/lib/Cards/Card';\nimport CardTitle from 'react-md/lib/Cards/CardTitle';\nimport Button from 'react-md/lib/Buttons';\nimport Avatar from 'react-md/lib/Avatars';\nimport CardText from 'react-md/lib/Cards/CardText';\nimport FontIcon from 'react-md/lib/FontIcons';\nimport { Link } from 'gatsby';\nimport moment from 'moment';\nimport Media, { MediaOverlay } from 'react-md/lib/Media';\nimport PostTags from '../PostTags';\nimport PostCover from '../PostCover';\nimport config from '../../../data/SiteConfig';\nimport './PostPreview.scss';\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className='md-grid md-cell md-cell--12'>\n        <Link style={{ textDecoration: 'none' }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: '0px' }}>\n            <PostCover postNode={postInfo} coverHeight={coverHeight} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className='md-cell--right'>\n                  바로 출력하기\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName='fa fa-calendar' />} />}\n          title={`Published on ${moment(postInfo.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`출력예상시간 : ${postInfo.timeToRead}시간 이내`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n"],"sourceRoot":""}